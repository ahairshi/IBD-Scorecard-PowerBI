"Id","CommandLine","ExecutionStatus","StartExecutionTime","EndExecutionTime"
"1","Remove-Module -Name PSReadline;$global:_warpOriginalPrompt = $function:global:prompt;if ($PSEdition -eq 'Desktop' -or $IsWindows) {;    $EP = [Microsoft.PowerShell.ExecutionPolicy];    if ((Get-ExecutionPolicy -Scope MachinePolicy) -eq $EP::Restricted -or (Get-ExecutionPolicy -Scope UserPolicy) -eq $EP::Restricted) {;        Write-Error 'ExecutionPolicy is Restricted. Unable to Warpify this PowerShell session.';    } elseif ((Get-ExecutionPolicy) -eq $EP::Restricted -and (Get-ExecutionPolicy -Scope MachinePolicy) -eq $EP::Undefined -and (Get-ExecutionPolicy -Scope UserPolicy) -eq $EP::Undefined) {;        $global:_warp_PSProcessExecPolicy = $(Get-ExecutionPolicy -Scope Process);        Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned -Force;    };};function prompt {;    $function:global:prompt = $global:_warpOriginalPrompt;    $username = [Environment]::UserName;    $epoch = [int](New-TimeSpan -Start ([DateTime]::new(1970, 1, 1, 0, 0, 0, 0)) -End ([DateTime]::UtcNow)).TotalSeconds;    $random = Get-Random -Maximum 32768;    $global:_warpSessionId = [int64]""$epoch$random"";    $msg = ConvertTo-Json -Compress -InputObject @{ hook = 'InitShell'; value = @{ session_id = $_warpSessionId; shell = 'pwsh'; user = $username; hostname = [System.Net.Dns]::GetHostName() } };    $encodedMsg = [BitConverter]::ToString([System.Text.Encoding]::UTF8.GetBytes($msg)).Replace('-', '');    $oscStart = ""$([char]0x1b)]9278;"";    $oscEnd = ""`a"";    $oscJsonMarker = 'd';    $oscParameterSeparator = ';';    Write-Host ""${oscStart}${oscJsonMarker}${oscParameterSeparator}${encodedMsg}${oscEnd}"";    return $null;}","Completed","8/4/2025 10:40:22 PM","8/4/2025 10:40:22 PM"
"2"," . 'C:\Users\ahamedirshad\AppData\Local\Programs\Warp\pwsh.ps1'","Completed","8/4/2025 10:40:23 PM","8/4/2025 10:40:24 PM"
"3","aws --version","Completed","8/4/2025 10:43:35 PM","8/4/2025 10:43:35 PM"
"4","Get-Module -ListAvailable -Name AWS*","Completed","8/4/2025 10:43:39 PM","8/4/2025 10:43:39 PM"
"5","winget install Amazon.AWSCLI","Completed","8/4/2025 10:43:46 PM","8/4/2025 10:44:20 PM"
"6","refreshenv; aws --version","Completed","8/4/2025 10:44:28 PM","8/4/2025 10:44:28 PM"
"7","$env:PATH = [System.Environment]::GetEnvironmentVariable(""PATH"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""PATH"",""User""); aws --version","Completed","8/4/2025 10:44:33 PM","8/4/2025 10:44:35 PM"
"8","aws configure","Completed","8/4/2025 10:45:31 PM","8/4/2025 10:46:08 PM"
"9","aws s3 ls","Completed","8/4/2025 10:46:13 PM","8/4/2025 10:46:20 PM"
"10","(aws s3 ls s3://scorecard/ --recursive) | \Out-Host","Completed","8/4/2025 10:46:41 PM","8/4/2025 10:46:46 PM"
"11","New-Item -ItemType Directory -Force -Path "".\PowerBI_Data""","Completed","8/4/2025 10:47:11 PM","8/4/2025 10:47:11 PM"
"12","aws s3 sync s3://scorecard/IBD/2023/ .\PowerBI_Data\2023\ --exclude ""*"" --include ""*.parquet""","Completed","8/4/2025 10:47:20 PM","8/4/2025 10:47:33 PM"
"13","aws s3 sync s3://scorecard/IBD/2024/ .\PowerBI_Data\2024\ --exclude ""*"" --include ""*.parquet""","Completed","8/4/2025 10:47:46 PM","8/4/2025 10:47:58 PM"
"14","aws s3 sync s3://scorecard/IBD/2025/ .\PowerBI_Data\2025\ --exclude ""*"" --include ""*.parquet""","Completed","8/4/2025 10:48:10 PM","8/4/2025 10:48:31 PM"
"15","Get-ChildItem -Path .\PowerBI_Data -Recurse -Name | Sort-Object","Completed","8/4/2025 10:48:36 PM","8/4/2025 10:48:36 PM"
"16","python -c ""import pandas as pd; df = pd.read_parquet('./PowerBI_Data/2024/202401_ibd_scorecard.parquet'); print('Shape:', df.shape); print('\nColumns:'); print(df.columns.tolist()); print('\nFirst few rows:'); print(df.head()); print('\nData types:'); print(df.dtypes)""","Completed","8/4/2025 10:48:43 PM","8/4/2025 10:48:43 PM"
"17","winget install Python.Python.3.12","Completed","8/4/2025 10:48:56 PM","8/4/2025 10:49:33 PM"
"18","$env:PATH = [System.Environment]::GetEnvironmentVariable(""PATH"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""PATH"",""User""); python --version","Completed","8/4/2025 10:49:38 PM","8/4/2025 10:49:38 PM"
"19","pip install pandas pyarrow","Completed","8/4/2025 10:49:44 PM","8/4/2025 10:50:08 PM"
"20","pip install --only-binary=all pandas pyarrow","Completed","8/4/2025 10:50:18 PM","8/4/2025 10:50:34 PM"
"21","Get-ChildItem -Path .\PowerBI_Data -Recurse -Include *.parquet | Measure-Object -Property Length -Sum | Select-Object Count, @{Name=""TotalSizeMB"";Expression={[math]::Round($_.Sum/1MB,2)}}","Completed","8/4/2025 10:50:41 PM","8/4/2025 10:50:41 PM"
"22","pip install fastparquet","Completed","8/4/2025 10:54:05 PM","8/4/2025 10:54:45 PM"
"23","notepad ""C:\Users\ahamedirshad\PowerBI_Setup_Guide.txt""","Completed","8/4/2025 10:57:58 PM","8/4/2025 10:57:58 PM"
"24","Get-ChildItem -Path ""C:\Users\ahamedirshad\PowerBI_Data"" -Recurse -Name | Select-Object -First 5","Completed","8/4/2025 11:03:14 PM","8/4/2025 11:03:14 PM"
"25","git --version","Completed","8/4/2025 11:53:15 PM","8/4/2025 11:53:15 PM"
"26","New-Item -ItemType Directory -Force -Path "".\IBD-Scorecard-PowerBI""","Completed","8/4/2025 11:53:38 PM","8/4/2025 11:53:39 PM"
"27","Copy-Item -Path ""PowerBI_Setup_Guide.txt"" -Destination "".\IBD-Scorecard-PowerBI\""","Completed","8/4/2025 11:53:47 PM","8/4/2025 11:53:47 PM"
"28","Copy-Item -Path ""PowerQuery_Script.txt"" -Destination "".\IBD-Scorecard-PowerBI\""","Completed","8/4/2025 11:54:46 PM","8/4/2025 11:54:47 PM"
"29","Copy-Item -Path ""DAX_Measures.txt"" -Destination "".\IBD-Scorecard-PowerBI\""","Completed","8/4/2025 11:55:02 PM","8/4/2025 11:55:02 PM"
"30","cd ""C:\Users\ahamedirshad\IBD-Scorecard-PowerBI""; git init","Completed","8/4/2025 11:55:49 PM","8/4/2025 11:55:49 PM"
"31","ls","Completed","8/4/2025 11:55:53 PM","8/4/2025 11:55:53 PM"
"32","git add .","Completed","8/4/2025 11:56:00 PM","8/4/2025 11:56:00 PM"
"33","git status","Completed","8/4/2025 11:56:05 PM","8/4/2025 11:56:05 PM"
"34",". { git commit -m ""Initial commit: IBD Scorecard Power BI project setup

- Added comprehensive Power BI setup guide
- Added Power Query M script for data transformation
- Added DAX measures for analytics
- Added detailed README with project documentation
- Configured .gitignore to exclude data files"" }","Completed","8/4/2025 11:56:18 PM","8/4/2025 11:56:18 PM"
"35","git config --global user.name","Completed","8/4/2025 11:56:23 PM","8/4/2025 11:56:23 PM"
"36","git config --global user.email","Completed","8/4/2025 11:56:28 PM","8/4/2025 11:56:28 PM"
"37","gh --version","Completed","8/4/2025 11:57:24 PM","8/4/2025 11:57:24 PM"
"38","winget install GitHub.cli","Completed","8/4/2025 11:57:31 PM","8/4/2025 11:57:47 PM"
"39","gh auth login --web","Completed","8/4/2025 11:58:42 PM","8/4/2025 11:58:42 PM"
"40","$env:PATH = [System.Environment]::GetEnvironmentVariable(""PATH"",""Machine"") + "";"" + [System.Environment]::GetEnvironmentVariable(""PATH"",""User""); gh --version","Completed","8/4/2025 11:58:52 PM","8/4/2025 11:58:53 PM"
"41","gh auth login --web","Completed","8/4/2025 11:59:02 PM","8/5/2025 12:01:30 AM"
"42","gh repo create IBD-Scorecard-PowerBI --public --source=. --remote=origin","Completed","8/5/2025 12:01:49 AM","8/5/2025 12:01:51 AM"
"43","git branch -M main","Completed","8/5/2025 12:02:59 AM","8/5/2025 12:02:59 AM"
"44","git push -u origin main","Completed","8/5/2025 12:03:11 AM","8/5/2025 12:03:16 AM"
